org/libsdl/app/BuildConfig = Org.Libsdl.App.BuildConfig
  <init>()V = .ctor()
  BUILD_TYPE = BuildType
  DEBUG = Debug
  LIBRARY_PACKAGE_NAME = LibraryPackageName
org/libsdl/app/HIDDeviceManager = Org.Libsdl.App.HIDDeviceManager
  getContext()Landroid/content/Context; = Context
  acquire(Landroid/content/Context;)Lorg/libsdl/app/HIDDeviceManager; = Acquire(Android.Content.Context)
  chromebookConnectionHandler()V = ChromebookConnectionHandler()
  closeDevice(I)V = CloseDevice(int)
  connectBluetoothDevice(Landroid/bluetooth/BluetoothDevice;)Z = ConnectBluetoothDevice(Android.Bluetooth.BluetoothDevice)
  disconnectBluetoothDevice(Landroid/bluetooth/BluetoothDevice;)V = DisconnectBluetoothDevice(Android.Bluetooth.BluetoothDevice)
  getDeviceIDForIdentifier(Ljava/lang/String;)I = GetDeviceIDForIdentifier(string)
  getFeatureReport(I[B)Z = GetFeatureReport(int, byte[])
  initialize(ZZ)Z = Initialize(bool, bool)
  isSteamController(Landroid/bluetooth/BluetoothDevice;)Z = IsSteamController(Android.Bluetooth.BluetoothDevice)
  openDevice(I)Z = OpenDevice(int)
  release(Lorg/libsdl/app/HIDDeviceManager;)V = Release(Org.Libsdl.App.HIDDeviceManager)
  sendFeatureReport(I[B)I = SendFeatureReport(int, byte[])
  sendOutputReport(I[B)I = SendOutputReport(int, byte[])
  setFrozen(Z)V = SetFrozen(bool)
org/libsdl/app/SDL = Org.Libsdl.App.SDL
  <init>()V = .ctor()
  mContext = MContext
  getContext()Landroid/content/Context; = Context
  setContext(Landroid/content/Context;)V = Context
  initialize()V = Initialize()
  loadLibrary(Ljava/lang/String;)V = LoadLibrary(string)
  setupJNI()V = SetupJNI()
org/libsdl/app/SDLActivity = Org.Libsdl.App.SDLActivity
  <init>()V = .ctor()
  COMMAND_USER = CommandUser
  mBrokenLibraries = MBrokenLibraries
  mCurrentLocale = MCurrentLocale
  mCurrentNativeState = MCurrentNativeState
  mCurrentOrientation = MCurrentOrientation
  messageboxSelection = MessageboxSelection
  mFullscreenModeActive = MFullscreenModeActive
  mHasFocus = MHasFocus
  mHasMultiWindow = MHasMultiWindow
  mHIDDeviceManager = MHIDDeviceManager
  mIsResumedCalled = MIsResumedCalled
  mLastCursorID = MLastCursorID
  mLayout = MLayout
  mNextNativeState = MNextNativeState
  mScreenKeyboardShown = MScreenKeyboardShown
  mSDLThread = MSDLThread
  mSingleton = MSingleton
  mTextEdit = MTextEdit
  SDL_ORIENTATION_LANDSCAPE = SdlOrientationLandscape
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = SdlOrientationLandscapeFlipped
  SDL_ORIENTATION_PORTRAIT = SdlOrientationPortrait
  SDL_ORIENTATION_PORTRAIT_FLIPPED = SdlOrientationPortraitFlipped
  SDL_ORIENTATION_UNKNOWN = SdlOrientationUnknown
  getContentView()Landroid/view/View; = ContentView
  getContext()Landroid/content/Context; = Context
  getCurrentOrientation()I = CurrentOrientation
  getDiagonal()D = Diagonal
  getDisplayDPI()Landroid/util/DisplayMetrics; = DisplayDPI
  isAndroidTV()Z = IsAndroidTV
  isChromebook()Z = IsChromebook
  isDeXMode()Z = IsDeXMode
  isScreenKeyboardShown()Z = IsScreenKeyboardShown
  isTablet()Z = IsTablet
  getMainFunction()Ljava/lang/String; = MainFunction
  getMainSharedObject()Ljava/lang/String; = MainSharedObject
  getManifestEnvironmentVariables()Z = ManifestEnvironmentVariables
  getNativeSurface()Landroid/view/Surface; = NativeSurface
  clipboardGetText()Ljava/lang/String; = ClipboardGetText()
  clipboardHasText()Z = ClipboardHasText()
  clipboardSetText(Ljava/lang/String;)V = ClipboardSetText(string)
  createCustomCursor([IIIII)I = CreateCustomCursor(int[], int, int, int, int)
  createSDLSurface(Landroid/content/Context;)Lorg/libsdl/app/SDLSurface; = CreateSDLSurface(Android.Content.Context)
  destroyCustomCursor(I)V = DestroyCustomCursor(int)
  getArguments()[Ljava/lang/String; = GetArguments()
  getLibraries()[Ljava/lang/String; = GetLibraries()
  handleNativeState()V = HandleNativeState()
  initialize()V = Initialize()
  initTouch()V = InitTouch()
  isTextInputEvent(Landroid/view/KeyEvent;)Z = IsTextInputEvent(Android.Views.KeyEvent)
  loadLibraries()V = LoadLibraries()
  manualBackButton()V = ManualBackButton()
  messageboxCreateAndShow(Landroid/os/Bundle;)V = MessageboxCreateAndShow(Android.OS.Bundle)
  messageboxShowMessageBox(ILjava/lang/String;Ljava/lang/String;[I[I[Ljava/lang/String;[I)I = MessageboxShowMessageBox(int, string, string, int[], int[], string[], int[])
  minimizeWindow()V = MinimizeWindow()
  nativeAddTouch(ILjava/lang/String;)V = NativeAddTouch(int, string)
  nativeFocusChanged(Z)V = NativeFocusChanged(bool)
  nativeGetHint(Ljava/lang/String;)Ljava/lang/String; = NativeGetHint(string)
  nativeGetHintBoolean(Ljava/lang/String;Z)Z = NativeGetHintBoolean(string, bool)
  nativeLowMemory()V = NativeLowMemory()
  nativePause()V = NativePause()
  nativePermissionResult(IZ)V = NativePermissionResult(int, bool)
  nativeQuit()V = NativeQuit()
  nativeResume()V = NativeResume()
  nativeRunMain(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)I = NativeRunMain(string, string, Java.Lang.Object)
  nativeSendQuit()V = NativeSendQuit()
  nativeSetenv(Ljava/lang/String;Ljava/lang/String;)V = NativeSetenv(string, string)
  nativeSetScreenResolution(IIIIF)V = NativeSetScreenResolution(int, int, int, int, float)
  nativeSetupJNI()I = NativeSetupJNI()
  onNativeAccel(FFF)V = OnNativeAccel(float, float, float)
  onNativeClipboardChanged()V = OnNativeClipboardChanged()
  onNativeDropFile(Ljava/lang/String;)V = OnNativeDropFile(string)
  onNativeKeyboardFocusLost()V = OnNativeKeyboardFocusLost()
  onNativeKeyDown(I)V = OnNativeKeyDown(int)
  onNativeKeyUp(I)V = OnNativeKeyUp(int)
  onNativeLocaleChanged()V = OnNativeLocaleChanged()
  onNativeMouse(IIFFZ)V = OnNativeMouse(int, int, float, float, bool)
  onNativeOrientationChanged(I)V = OnNativeOrientationChanged(int)
  onNativeResize()V = OnNativeResize()
  onNativeSoftReturnKey()Z = OnNativeSoftReturnKey()
  onNativeSurfaceChanged()V = OnNativeSurfaceChanged()
  onNativeSurfaceCreated()V = OnNativeSurfaceCreated()
  onNativeSurfaceDestroyed()V = OnNativeSurfaceDestroyed()
  onNativeTouch(IIIFFF)V = OnNativeTouch(int, int, int, float, float, float)
  onRequestPermissionsResult(I[Ljava/lang/String;[I)V = OnRequestPermissionsResult(int, string[], int[])
  onSystemUiVisibilityChange(I)V = OnSystemUiVisibilityChange(Android.Views.StatusBarVisibility)
  onUnhandledMessage(ILjava/lang/Object;)Z = OnUnhandledMessage(int, Java.Lang.Object)
  openURL(Ljava/lang/String;)I = OpenURL(string)
  pauseNativeThread()V = PauseNativeThread()
  pressBackButton()V = PressBackButton()
  requestPermission(Ljava/lang/String;I)V = RequestPermission(string, int)
  resumeNativeThread()V = ResumeNativeThread()
  sendMessage(II)Z = SendMessage(int, int)
  setActivityTitle(Ljava/lang/String;)Z = SetActivityTitle(string)
  setCustomCursor(I)Z = SetCustomCursor(int)
  setOrientation(IIZLjava/lang/String;)V = SetOrientation(int, int, bool, string)
  setOrientationBis(IIZLjava/lang/String;)V = SetOrientationBis(int, int, bool, string)
  setRelativeMouseEnabled(Z)Z = SetRelativeMouseEnabled(bool)
  setSystemCursor(I)Z = SetSystemCursor(int)
  setWindowStyle(Z)V = SetWindowStyle(bool)
  shouldMinimizeOnFocusLoss()Z = ShouldMinimizeOnFocusLoss()
  showTextInput(IIII)Z = ShowTextInput(int, int, int, int)
  showToast(Ljava/lang/String;IIII)I = ShowToast(string, int, int, int, int)
  superOnBackPressed()V = SuperOnBackPressed()
  supportsRelativeMouse()Z = SupportsRelativeMouse()
org/libsdl/app/SDLAudioManager = Org.Libsdl.App.SDLAudioManager
  <init>()V = .ctor()
  mAudioRecord = MAudioRecord
  mAudioTrack = MAudioTrack
  TAG = Tag
  audioClose()V = AudioClose()
  audioOpen(IIII)[I = AudioOpen(int, int, int, int)
  audioSetThreadPriority(ZI)V = AudioSetThreadPriority(bool, int)
  audioWriteByteBuffer([B)V = AudioWriteByteBuffer(byte[])
  audioWriteFloatBuffer([F)V = AudioWriteFloatBuffer(float[])
  audioWriteShortBuffer([S)V = AudioWriteShortBuffer(short[])
  captureClose()V = CaptureClose()
  captureOpen(IIII)[I = CaptureOpen(int, int, int, int)
  captureReadByteBuffer([BZ)I = CaptureReadByteBuffer(byte[], bool)
  captureReadFloatBuffer([FZ)I = CaptureReadFloatBuffer(float[], bool)
  captureReadShortBuffer([SZ)I = CaptureReadShortBuffer(short[], bool)
  getAudioFormatString(I)Ljava/lang/String; = GetAudioFormatString(int)
  initialize()V = Initialize()
  nativeSetupJNI()I = NativeSetupJNI()
  open(ZIIII)[I = Open(bool, int, int, int, int)
org/libsdl/app/SDLControllerManager = Org.Libsdl.App.SDLControllerManager
  <init>()V = .ctor()
  handleJoystickMotionEvent(Landroid/view/MotionEvent;)Z = HandleJoystickMotionEvent(Android.Views.MotionEvent)
  hapticRun(IFI)V = HapticRun(int, float, int)
  hapticStop(I)V = HapticStop(int)
  initialize()V = Initialize()
  isDeviceSDLJoystick(I)Z = IsDeviceSDLJoystick(int)
  nativeAddHaptic(ILjava/lang/String;)I = NativeAddHaptic(int, string)
  nativeAddJoystick(ILjava/lang/String;Ljava/lang/String;IIZIIII)I = NativeAddJoystick(int, string, string, int, int, bool, int, int, int, int)
  nativeRemoveHaptic(I)I = NativeRemoveHaptic(int)
  nativeRemoveJoystick(I)I = NativeRemoveJoystick(int)
  nativeSetupJNI()I = NativeSetupJNI()
  onNativeHat(IIII)V = OnNativeHat(int, int, int, int)
  onNativeJoy(IIF)V = OnNativeJoy(int, int, float)
  onNativePadDown(II)I = OnNativePadDown(int, int)
  onNativePadUp(II)I = OnNativePadUp(int, int)
  pollHapticDevices()V = PollHapticDevices()
  pollInputDevices()V = PollInputDevices()
org/libsdl/app/SDLSurface = Org.Libsdl.App.SDLSurface
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  mDisplay = MDisplay
  mHeight = MHeight
  mIsSurfaceReady = MIsSurfaceReady
  mSensorManager = MSensorManager
  mWidth = MWidth
  getNativeSurface()Landroid/view/Surface; = NativeSurface
  enableSensor(IZ)V = EnableSensor(int, bool)
  handlePause()V = HandlePause()
  handleResume()V = HandleResume()
  onAccuracyChanged(Landroid/hardware/Sensor;I)V = OnAccuracyChanged(Android.Hardware.Sensor, Android.Hardware.SensorStatus)
  onCapturedPointerEvent(Landroid/view/MotionEvent;)Z = OnCapturedPointerEvent(Android.Views.MotionEvent)
  onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z = OnKey(Android.Views.View, Android.Views.Keycode, Android.Views.KeyEvent)
  onSensorChanged(Landroid/hardware/SensorEvent;)V = OnSensorChanged(Android.Hardware.SensorEvent)
  onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z = OnTouch(Android.Views.View, Android.Views.MotionEvent)
  surfaceChanged(Landroid/view/SurfaceHolder;III)V = SurfaceChanged(Android.Views.ISurfaceHolder, Android.Graphics.Format, int, int)
  surfaceCreated(Landroid/view/SurfaceHolder;)V = SurfaceCreated(Android.Views.ISurfaceHolder)
  surfaceDestroyed(Landroid/view/SurfaceHolder;)V = SurfaceDestroyed(Android.Views.ISurfaceHolder)
