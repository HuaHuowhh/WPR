//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Org.Libsdl.App {

	// Metadata.xml XPath class reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']"
	[global::Android.Runtime.Register ("org/libsdl/app/SDLControllerManager", DoNotGenerateAcw=true)]
	public partial class SDLControllerManager : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("org/libsdl/app/SDLControllerManager", typeof (SDLControllerManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SDLControllerManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/constructor[@name='SDLControllerManager' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe SDLControllerManager () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='handleJoystickMotionEvent' and count(parameter)=1 and parameter[1][@type='android.view.MotionEvent']]"
		[Register ("handleJoystickMotionEvent", "(Landroid/view/MotionEvent;)Z", "")]
		public static unsafe bool HandleJoystickMotionEvent (global::Android.Views.MotionEvent e)
		{
			const string __id = "handleJoystickMotionEvent.(Landroid/view/MotionEvent;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Object) e).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (e);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='hapticRun' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='float'] and parameter[3][@type='int']]"
		[Register ("hapticRun", "(IFI)V", "")]
		public static unsafe void HapticRun (int device_id, float intensity, int length)
		{
			const string __id = "hapticRun.(IFI)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (device_id);
				__args [1] = new JniArgumentValue (intensity);
				__args [2] = new JniArgumentValue (length);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='hapticStop' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("hapticStop", "(I)V", "")]
		public static unsafe void HapticStop (int device_id)
		{
			const string __id = "hapticStop.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (device_id);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='initialize' and count(parameter)=0]"
		[Register ("initialize", "()V", "")]
		public static unsafe void Initialize ()
		{
			const string __id = "initialize.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='isDeviceSDLJoystick' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("isDeviceSDLJoystick", "(I)Z", "")]
		public static unsafe bool IsDeviceSDLJoystick (int deviceId)
		{
			const string __id = "isDeviceSDLJoystick.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (deviceId);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='nativeAddHaptic' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("nativeAddHaptic", "(ILjava/lang/String;)I", "")]
		public static unsafe int NativeAddHaptic (int p0, string p1)
		{
			const string __id = "nativeAddHaptic.(ILjava/lang/String;)I";
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='nativeAddJoystick' and count(parameter)=10 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='boolean'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='int'] and parameter[10][@type='int']]"
		[Register ("nativeAddJoystick", "(ILjava/lang/String;Ljava/lang/String;IIZIIII)I", "")]
		public static unsafe int NativeAddJoystick (int p0, string p1, string p2, int p3, int p4, bool p5, int p6, int p7, int p8, int p9)
		{
			const string __id = "nativeAddJoystick.(ILjava/lang/String;Ljava/lang/String;IIZIIII)I";
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			IntPtr native_p2 = JNIEnv.NewString ((string)p2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [10];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (native_p1);
				__args [2] = new JniArgumentValue (native_p2);
				__args [3] = new JniArgumentValue (p3);
				__args [4] = new JniArgumentValue (p4);
				__args [5] = new JniArgumentValue (p5);
				__args [6] = new JniArgumentValue (p6);
				__args [7] = new JniArgumentValue (p7);
				__args [8] = new JniArgumentValue (p8);
				__args [9] = new JniArgumentValue (p9);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_p1);
				JNIEnv.DeleteLocalRef (native_p2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='nativeRemoveHaptic' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("nativeRemoveHaptic", "(I)I", "")]
		public static unsafe int NativeRemoveHaptic (int p0)
		{
			const string __id = "nativeRemoveHaptic.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='nativeRemoveJoystick' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("nativeRemoveJoystick", "(I)I", "")]
		public static unsafe int NativeRemoveJoystick (int p0)
		{
			const string __id = "nativeRemoveJoystick.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='nativeSetupJNI' and count(parameter)=0]"
		[Register ("nativeSetupJNI", "()I", "")]
		public static unsafe int NativeSetupJNI ()
		{
			const string __id = "nativeSetupJNI.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='onNativeHat' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("onNativeHat", "(IIII)V", "")]
		public static unsafe void OnNativeHat (int p0, int p1, int p2, int p3)
		{
			const string __id = "onNativeHat.(IIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				__args [3] = new JniArgumentValue (p3);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='onNativeJoy' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='float']]"
		[Register ("onNativeJoy", "(IIF)V", "")]
		public static unsafe void OnNativeJoy (int p0, int p1, float p2)
		{
			const string __id = "onNativeJoy.(IIF)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='onNativePadDown' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("onNativePadDown", "(II)I", "")]
		public static unsafe int OnNativePadDown (int p0, int p1)
		{
			const string __id = "onNativePadDown.(II)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='onNativePadUp' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("onNativePadUp", "(II)I", "")]
		public static unsafe int OnNativePadUp (int p0, int p1)
		{
			const string __id = "onNativePadUp.(II)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='pollHapticDevices' and count(parameter)=0]"
		[Register ("pollHapticDevices", "()V", "")]
		public static unsafe void PollHapticDevices ()
		{
			const string __id = "pollHapticDevices.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLControllerManager']/method[@name='pollInputDevices' and count(parameter)=0]"
		[Register ("pollInputDevices", "()V", "")]
		public static unsafe void PollInputDevices ()
		{
			const string __id = "pollInputDevices.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

	}
}
