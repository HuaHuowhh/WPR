//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Org.Libsdl.App {

	// Metadata.xml XPath class reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']"
	[global::Android.Runtime.Register ("org/libsdl/app/SDLAudioManager", DoNotGenerateAcw=true)]
	public partial class SDLAudioManager : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/field[@name='mAudioRecord']"
		[Register ("mAudioRecord")]
		protected static global::Android.Media.AudioRecord MAudioRecord {
			get {
				const string __id = "mAudioRecord.Landroid/media/AudioRecord;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Android.Media.AudioRecord> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "mAudioRecord.Landroid/media/AudioRecord;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/field[@name='mAudioTrack']"
		[Register ("mAudioTrack")]
		protected static global::Android.Media.AudioTrack MAudioTrack {
			get {
				const string __id = "mAudioTrack.Landroid/media/AudioTrack;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Android.Media.AudioTrack> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "mAudioTrack.Landroid/media/AudioTrack;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/field[@name='TAG']"
		[Register ("TAG")]
		protected const string Tag = (string) "SDLAudio";

		static readonly JniPeerMembers _members = new XAPeerMembers ("org/libsdl/app/SDLAudioManager", typeof (SDLAudioManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SDLAudioManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/constructor[@name='SDLAudioManager' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe SDLAudioManager () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioClose' and count(parameter)=0]"
		[Register ("audioClose", "()V", "")]
		public static unsafe void AudioClose ()
		{
			const string __id = "audioClose.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioOpen' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("audioOpen", "(IIII)[I", "")]
		public static unsafe int[] AudioOpen (int sampleRate, int audioFormat, int desiredChannels, int desiredFrames)
		{
			const string __id = "audioOpen.(IIII)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (sampleRate);
				__args [1] = new JniArgumentValue (audioFormat);
				__args [2] = new JniArgumentValue (desiredChannels);
				__args [3] = new JniArgumentValue (desiredFrames);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioSetThreadPriority' and count(parameter)=2 and parameter[1][@type='boolean'] and parameter[2][@type='int']]"
		[Register ("audioSetThreadPriority", "(ZI)V", "")]
		public static unsafe void AudioSetThreadPriority (bool iscapture, int device_id)
		{
			const string __id = "audioSetThreadPriority.(ZI)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (iscapture);
				__args [1] = new JniArgumentValue (device_id);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioWriteByteBuffer' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("audioWriteByteBuffer", "([B)V", "")]
		public static unsafe void AudioWriteByteBuffer (byte[] buffer)
		{
			const string __id = "audioWriteByteBuffer.([B)V";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buffer);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioWriteFloatBuffer' and count(parameter)=1 and parameter[1][@type='float[]']]"
		[Register ("audioWriteFloatBuffer", "([F)V", "")]
		public static unsafe void AudioWriteFloatBuffer (float[] buffer)
		{
			const string __id = "audioWriteFloatBuffer.([F)V";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buffer);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='audioWriteShortBuffer' and count(parameter)=1 and parameter[1][@type='short[]']]"
		[Register ("audioWriteShortBuffer", "([S)V", "")]
		public static unsafe void AudioWriteShortBuffer (short[] buffer)
		{
			const string __id = "audioWriteShortBuffer.([S)V";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buffer);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='captureClose' and count(parameter)=0]"
		[Register ("captureClose", "()V", "")]
		public static unsafe void CaptureClose ()
		{
			const string __id = "captureClose.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='captureOpen' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("captureOpen", "(IIII)[I", "")]
		public static unsafe int[] CaptureOpen (int sampleRate, int audioFormat, int desiredChannels, int desiredFrames)
		{
			const string __id = "captureOpen.(IIII)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (sampleRate);
				__args [1] = new JniArgumentValue (audioFormat);
				__args [2] = new JniArgumentValue (desiredChannels);
				__args [3] = new JniArgumentValue (desiredFrames);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='captureReadByteBuffer' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='boolean']]"
		[Register ("captureReadByteBuffer", "([BZ)I", "")]
		public static unsafe int CaptureReadByteBuffer (byte[] buffer, bool blocking)
		{
			const string __id = "captureReadByteBuffer.([BZ)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (blocking);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='captureReadFloatBuffer' and count(parameter)=2 and parameter[1][@type='float[]'] and parameter[2][@type='boolean']]"
		[Register ("captureReadFloatBuffer", "([FZ)I", "")]
		public static unsafe int CaptureReadFloatBuffer (float[] buffer, bool blocking)
		{
			const string __id = "captureReadFloatBuffer.([FZ)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (blocking);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='captureReadShortBuffer' and count(parameter)=2 and parameter[1][@type='short[]'] and parameter[2][@type='boolean']]"
		[Register ("captureReadShortBuffer", "([SZ)I", "")]
		public static unsafe int CaptureReadShortBuffer (short[] buffer, bool blocking)
		{
			const string __id = "captureReadShortBuffer.([SZ)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (blocking);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='getAudioFormatString' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getAudioFormatString", "(I)Ljava/lang/String;", "")]
		protected static unsafe string GetAudioFormatString (int audioFormat)
		{
			const string __id = "getAudioFormatString.(I)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (audioFormat);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='initialize' and count(parameter)=0]"
		[Register ("initialize", "()V", "")]
		public static unsafe void Initialize ()
		{
			const string __id = "initialize.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='nativeSetupJNI' and count(parameter)=0]"
		[Register ("nativeSetupJNI", "()I", "")]
		public static unsafe int NativeSetupJNI ()
		{
			const string __id = "nativeSetupJNI.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='org.libsdl.app']/class[@name='SDLAudioManager']/method[@name='open' and count(parameter)=5 and parameter[1][@type='boolean'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("open", "(ZIIII)[I", "")]
		protected static unsafe int[] Open (bool isCapture, int sampleRate, int audioFormat, int desiredChannels, int desiredFrames)
		{
			const string __id = "open.(ZIIII)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (isCapture);
				__args [1] = new JniArgumentValue (sampleRate);
				__args [2] = new JniArgumentValue (audioFormat);
				__args [3] = new JniArgumentValue (desiredChannels);
				__args [4] = new JniArgumentValue (desiredFrames);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

	}
}
